[{"categories":null,"contents":"\rCristian Antony Soncco Boza\rDesarrollador Full Stack | Especialista en IA y Migración de Datos\rAngular | .NET | Oracle | DevOps | TensorFlow | Modernización de Aplicaciones | Sistemas Escalables. Con +14 años de trayectoria, especializado en C#/.NET, Java Spring Boot y arquitecturas de microservicios.\rVer Portfolio\r","permalink":"https://CristianSoncco.github.io/home/showcase/","tags":null,"title":"Showcase"},{"categories":null,"contents":"Sobre mí Desarrollador de software con +14 años de trayectoria, los últimos 5 enfocados en C#/.NET (2 años en .NET Framework y 3 años en .NET Core). Especialista en Java Spring Boot, Angular, .NET, Oracle y DevOps.\nHe entregado soluciones mission-critical en sectores como siderurgia, turismo, banca, seguros y salud, colaborando con clientes internacionales como Tenaris y Belmond, además de proyectos estratégicos para la Fuerza Aérea del Perú.\nDomino arquitecturas de microservicios, Clean Code y principios SOLID; trabajo con metodologías ágiles y nubes Azure/AWS. Integro LLMs (Claude, GPT-4o) y GitHub Copilot para acelerar el delivery y mejorar la calidad, orquestando contenedores con Docker y gestionando versiones con GitFlow y TDD.\nMi enfoque está orientado a resultados: he reducido tiempos de despliegue en 40% y optimizado costos cloud en 25%, generando impacto directo en el negocio.\n","permalink":"https://CristianSoncco.github.io/home/about/","tags":null,"title":"Sobre mí"},{"categories":null,"contents":"Experiencia Destacada BAHÍA SOFTWARE - Analista Programador (Nov 2023 - Actualidad) Tecnologías: Angular 15, Java Spring Boot, Oracle\nDesarrollo de sistemas web en Angular 15 frontend, Java Spring Boot backend y Oracle Mejora en la performance de 4 procesos Spring en Linux de 2 horas a 4 min Desarrollo desde cero de ETL con Python Soporte y Mantenimientos de sistemas PHP sobre Linux NTT DATA Europe \u0026amp; Latam - Center Senior Developer (Feb 2021 - Sept 2023) Tecnologías: Angular 12, C# .NET CORE, PostgreSQL/Oracle\nDesarrollo de dos sistemas web en Angular 12 frontend, C# .NET CORE backend y PostgreSQL/Oracle Mejoras en la performance de carga en un 40% a través de la modularización con sistema legado Mejora del rendimiento, escalabilidad de API basada en microservicios .NET CORE C# Soporte y Mantenimientos de sistemas .NET framework con uso de patrones Proxy y Fabric CSTI Corp - Consultor TI (Agosto 2020 - Enero 2021) Tecnologías: Angular, .NET, Oracle, Clean Code, SOLID\nDesarrollar módulos/reportes/procesos internos para el sistema informático Acselx (sistema ERP en Rimac Seguros) Mitigé posibles fallas a cumplimientos legislativos soportados en procesos ORACLE PL/SQL en el sector seguros Desarrollo, Testing de métodos de microservicios en .NET para la aplicación de clientes del Banco Ripley Fuerza Aérea del Perú - Coordinador de desarrollo de software (Junio 2020 - Febrero 2021) Tecnologías: Java, Oracle\nAsumí la responsabilidad técnica de gestionar con la superintendencia nacional de salud en Perú los requerimientos, desarrollo y pruebas del servicio web en JAVA SOAP y sus implicancias respecto a la base de datos en Oracle 11g de la F.A.P. unidad de seguros ","permalink":"https://CristianSoncco.github.io/home/client-and-work/","tags":null,"title":"Mis Proyectos"},{"categories":null,"contents":"¿Tienes un proyecto interesante o necesitas consultoría en arquitectura de software? Ubicación: Lugo, España (GMT+1)\nTeléfono: (+34) 625177420\nEmail: cristian_soncco@msn.com\nLinkedIn: linkedin.com/in/cristian-soncco\nGitHub: github.com/CristianSoncco\nEspecializado en modernización de aplicaciones, migración de datos, desarrollo full-stack y arquitecturas escalables. Disponible para proyectos remotos y consultorías técnicas.\nÁreas de Expertise: Frontend: Angular (4-15 años de experiencia) Backend: C# .NET (5 años), Java (4 años) Bases de Datos: Oracle, PostgreSQL, MySQL, SQL Server Cloud \u0026amp; DevOps: Azure, AWS, Docker, Git Flow, TDD IA \u0026amp; Automatización: TensorFlow, Claude AI, GitHub Copilot ","permalink":"https://CristianSoncco.github.io/home/contact/","tags":null,"title":"Contacto"},{"categories":null,"contents":"La arquitectura hexagonal, también conocida como Ports and Adapters, representa uno de los paradigmas más efectivos para construir aplicaciones backend robustas y mantenibles. En el contexto de NestJS, esta aproximación arquitectónica nos permite crear APIs que no solo son escalables, sino que también mantienen una separación clara de responsabilidades y facilitan tanto el testing como la evolución del código a largo plazo.\nFundamentos de la Arquitectura Hexagonal La arquitectura hexagonal propone una estructura donde el núcleo de la aplicación (dominio) permanece completamente aislado de las preocupaciones externas como bases de datos, frameworks web o servicios de terceros. Esta separación se logra mediante la definición de puertos (interfaces) que actúan como contratos, y adaptadores que implementan estos contratos para interactuar con el mundo exterior.\nEn el contexto de una aplicación NestJS, esto se traduce en una estructura donde los casos de uso del negocio están completamente desacoplados de la infraestructura técnica. Los controladores actúan como adaptadores de entrada, mientras que los repositorios y servicios externos funcionan como adaptadores de salida, todos comunicándose con el núcleo a través de interfaces bien definidas.\nImplementación Práctica en NestJS La implementación de arquitectura hexagonal en NestJS requiere una organización cuidadosa de módulos y una definición clara de las capas de la aplicación. La estructura típica incluye una capa de dominio que contiene las entidades y reglas de negocio, una capa de aplicación con los casos de uso, y una capa de infraestructura que maneja las preocupaciones técnicas.\n// Domain Layer - User Entity export class User { constructor( private readonly id: UserId, private readonly email: Email, private readonly profile: UserProfile ) {} public updateProfile(newProfile: UserProfile): void { // Business logic validation if (!newProfile.isValid()) { throw new InvalidProfileError(); } this.profile = newProfile; } public getId(): UserId { return this.id; } } // Application Layer - Port Definition export interface UserRepository { findById(id: UserId): Promise\u0026lt;User | null\u0026gt;; save(user: User): Promise\u0026lt;void\u0026gt;; findByEmail(email: Email): Promise\u0026lt;User | null\u0026gt;; } // Application Layer - Use Case @Injectable() export class UpdateUserProfileUseCase { constructor(private readonly userRepository: UserRepository) {} async execute(command: UpdateUserProfileCommand): Promise\u0026lt;void\u0026gt; { const user = await this.userRepository.findById(command.userId); if (!user) { throw new UserNotFoundError(); } user.updateProfile(command.newProfile); await this.userRepository.save(user); } } Ventajas en el Desarrollo con TypeScript TypeScript potencia significativamente los beneficios de la arquitectura hexagonal mediante su sistema de tipos estático. La definición de interfaces para los puertos garantiza que los adaptadores cumplan con los contratos establecidos, mientras que los tipos personalizados para entidades de dominio previenen errores comunes y mejoran la expresividad del código.\nLa combinación de decoradores de NestJS con TypeScript permite crear una inyección de dependencias robusta que facilita el intercambio de implementaciones sin afectar el núcleo de la aplicación. Esto es particularmente valioso durante las fases de testing, donde podemos sustituir fácilmente los adaptadores reales por mocks o stubs.\nIntegración con MariaDB y Gestión de Datos La persistencia de datos en MariaDB se maneja a través de adaptadores que implementan las interfaces definidas en la capa de aplicación. Esta aproximación permite que la lógica de negocio permanezca agnóstica respecto al sistema de gestión de base de datos utilizado, facilitando migraciones futuras o la implementación de estrategias de persistencia híbridas.\n// Infrastructure Layer - MariaDB Adapter @Injectable() export class MariaDBUserRepository implements UserRepository { constructor( @InjectRepository(UserEntity) private readonly userEntityRepository: Repository\u0026lt;UserEntity\u0026gt; ) {} async findById(id: UserId): Promise\u0026lt;User | null\u0026gt; { const userEntity = await this.userEntityRepository.findOne({ where: { id: id.value } }); return userEntity ? this.toDomain(userEntity) : null; } async save(user: User): Promise\u0026lt;void\u0026gt; { const userEntity = this.toEntity(user); await this.userEntityRepository.save(userEntity); } private toDomain(entity: UserEntity): User { return new User( new UserId(entity.id), new Email(entity.email), new UserProfile(entity.profile) ); } } Testing y Calidad del Código La arquitectura hexagonal facilita enormemente la implementación de estrategias de testing comprehensivas. Los casos de uso pueden ser probados de forma aislada utilizando mocks para los puertos, mientras que los adaptadores pueden ser testados independientemente para verificar su correcta integración con sistemas externos.\nEsta separación permite implementar tanto testing unitario como de integración de manera eficiente, garantizando que cada capa de la aplicación funcione correctamente tanto de forma aislada como en conjunto. La utilización de herramientas como Jest y supertest en el ecosistema NestJS complementa perfectamente esta aproximación arquitectónica.\nConsideraciones de Performance y Escalabilidad La arquitectura hexagonal, cuando se implementa correctamente, no introduce overhead significativo en términos de performance. Sin embargo, es crucial considerar aspectos como el mapeo entre entidades de dominio y entidades de persistencia, así como la gestión eficiente de transacciones de base de datos.\nEn aplicaciones de alta concurrencia, la separación clara de responsabilidades permite optimizar cada capa independientemente. Por ejemplo, se pueden implementar estrategias de caching en la capa de infraestructura sin afectar la lógica de negocio, o utilizar patrones como CQRS para separar operaciones de lectura y escritura.\nDespliegue en Entornos CentOS El despliegue de aplicaciones NestJS con arquitectura hexagonal en servidores CentOS requiere consideraciones específicas relacionadas con la gestión de procesos, monitoreo y escalabilidad horizontal. La utilización de herramientas como PM2 para la gestión de procesos Node.js, combinada con proxy reverso mediante Nginx, proporciona una base sólida para aplicaciones en producción.\nLa containerización con Docker facilita la gestión de dependencias y la consistencia entre entornos de desarrollo y producción. La arquitectura hexagonal se beneficia particularmente de esta aproximación, ya que permite empaquetar cada adaptador con sus dependencias específicas mientras mantiene el núcleo de la aplicación portable.\nEvolución y Mantenimiento a Largo Plazo Una de las principales ventajas de la arquitectura hexagonal es su capacidad para evolucionar de manera controlada. Los cambios en requisitos de negocio se reflejan principalmente en la capa de dominio y aplicación, mientras que las modificaciones tecnológicas afectan únicamente a los adaptadores correspondientes.\nEsta separación facilita la adopción de nuevas tecnologías, la migración gradual de sistemas legacy, y la implementación de estrategias de modernización incremental. En el contexto de equipos de desarrollo, permite que diferentes desarrolladores trabajen en capas distintas con mínima interferencia, mejorando la productividad y reduciendo conflictos de integración.\nLa arquitectura hexagonal en NestJS representa una inversión estratégica en la calidad y mantenibilidad del código. Aunque requiere una curva de aprendizaje inicial y una disciplina arquitectónica constante, los beneficios a largo plazo en términos de testabilidad, escalabilidad y evolución del software justifican ampliamente esta aproximación para proyectos empresariales serios.\n¿Has enfrentado desafíos similares de performance en tus proyectos? Me encantaría conocer tu experiencia y las técnicas que has utilizado. Puedes contactarme en cristian_soncco@msn.com o conectar conmigo en LinkedIn.\n","permalink":"https://CristianSoncco.github.io/posts/mi-primer-post/","tags":["NestJS","Arquitectura Hexagonal","Clean Architecture","TypeScript","API Design","Best Practices"],"title":"Arquitectura Hexagonal en NestJS: Construyendo APIs Escalables y Mantenibles"},{"categories":["Desarrollo Web","Optimización"],"contents":"Sistema de Gestión Web - BAHÍA SOFTWARE Descripción del Proyecto Desarrollo integral de sistemas web utilizando Angular 15 para el frontend, Java Spring Boot para el backend y Oracle como base de datos. Proyecto enfocado en la modernización de procesos empresariales y optimización de performance.\nTecnologías Utilizadas Frontend Angular 15 - Framework principal para la interfaz de usuario TypeScript - Lenguaje de programación Bootstrap - Framework CSS para diseño responsive RxJS - Programación reactiva Backend Java Spring Boot - Framework principal del backend Spring Security - Autenticación y autorización Spring Data JPA - Acceso a datos Maven - Gestión de dependencias Base de Datos Oracle Database - Sistema de gestión de base de datos PL/SQL - Procedimientos almacenados Oracle Forms \u0026amp; Reports - Herramientas complementarias Herramientas Adicionales Python - Desarrollo de ETL desde cero Linux - Entorno de despliegue Git - Control de versiones Características Principales Optimización de Performance Mejora dramática en procesos Spring: Reducción de tiempo de ejecución de 2 horas a 4 minutos en 4 procesos críticos ejecutados en Linux Arquitectura optimizada para manejo de grandes volúmenes de datos Implementación de caché para consultas frecuentes Desarrollo ETL Personalizado Desarrollo desde cero de procesos ETL utilizando Python Integración seamless con sistemas legacy Automatización de procesos de migración de datos Monitoreo y logging avanzado Mantenimiento de Sistemas Legacy Soporte continuo de sistemas PHP sobre Linux Modernización gradual de componentes críticos Documentación técnica completa Arquitectura del Sistema Patrón de Arquitectura Arquitectura en capas (Presentation, Business, Data Access) Separación de responsabilidades clara Principios SOLID aplicados consistentemente Integración de Sistemas APIs RESTful para comunicación entre servicios Manejo de transacciones distribuidas Implementación de circuit breakers para resiliencia Resultados y Métricas Performance ✅ Reducción del 95% en tiempo de procesamiento (2h → 4min) ✅ Mejora en throughput de datos procesados ✅ Optimización de consultas Oracle complejas Calidad del Código ✅ Cobertura de testing superior al 80% ✅ Code review sistemático ✅ Documentación técnica completa Impacto en el Negocio ✅ Automatización de procesos manuales ✅ Reducción de errores operacionales ✅ Mejora en la experiencia del usuario final Desafíos Técnicos Superados Optimización de Consultas Oracle Implementación de técnicas avanzadas de optimización para consultas complejas que involucraban múltiples tablas y grandes volúmenes de datos.\nMigración de Datos Legacy Desarrollo de estrategias de migración que garantizaran la integridad de datos mientras se mantenía la operatividad del sistema.\nIntegración con Sistemas Heterogéneos Creación de adaptadores y middlewares para integrar sistemas desarrollados en diferentes tecnologías y épocas.\nMetodología de Desarrollo Metodologías Ágiles (Scrum) Desarrollo Iterativo con entregas frecuentes Testing Driven Development (TDD) Continuous Integration/Continuous Deployment (CI/CD) Equipo y Colaboración Trabajo en equipo multidisciplinario colaborando estrechamente con:\nAnalistas de negocio para definición de requerimientos DBAs para optimización de base de datos DevOps para estrategias de despliegue QA para aseguramiento de calidad Este proyecto demuestra mi capacidad para liderar desarrollos complejos, optimizar sistemas existentes y entregar soluciones que generen impacto real en el negocio.\n","permalink":"https://CristianSoncco.github.io/portfolio/proyecto1/","tags":["Angular","Java Spring Boot","Oracle","ETL","Python","Linux"],"title":"Sistema de Gestión Web - BAHÍA SOFTWARE"},{"categories":["Desarrollo Web","Arquitectura"],"contents":"Sistemas Web Empresariales - NTT DATA Europe \u0026amp; Latam Descripción del Proyecto Como Center Senior Developer en NTT DATA, lideré el desarrollo de dos sistemas web empresariales críticos utilizando Angular 12 para el frontend, C# .NET CORE para el backend y PostgreSQL/Oracle como bases de datos.\nTecnologías Utilizadas Frontend Angular 12 - Framework principal TypeScript - Lenguaje de programación tipado Angular Material - Biblioteca de componentes UI RxJS - Programación reactiva Backend C# .NET CORE - Framework principal del backend ASP.NET Core Web API - APIs RESTful Entity Framework Core - ORM para acceso a datos Microservicios - Arquitectura distribuida Base de Datos PostgreSQL - Base de datos principal Oracle Database - Sistema legacy integrado Logros Principales Mejora de Performance del 40% Optimización de consultas complejas Implementación de caché distribuido Modularización con sistema legado Arquitectura de microservicios escalable Resultados ✅ 40% mejora en tiempo de carga ✅ 99.9% disponibilidad del sistema ✅ 90% cobertura de unit tests ✅ Modernización exitosa de sistemas críticos Características Técnicas Desarrollo .NET Framework Legacy Mantenimiento y soporte de sistemas .NET Framework Implementación de patrones Proxy y Fabric para abstracción Refactoring gradual hacia .NET Core Integración con servicios modernos Escalabilidad y Performance Horizontal scaling de microservicios Load balancing automático Database sharding para grandes volúmenes Monitoring y alertas en tiempo real Seguridad Implementada JWT Authentication con refresh tokens OAuth 2.0 para integración con terceros Role-based access control (RBAC) Data encryption en tránsito y reposo API rate limiting y throttling Arquitectura del Sistema Patrón de Microservicios ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐\r│ Angular 12 │ │ API Gateway │ │ User Service │\r│ Frontend │◄──►│ .NET Core │◄──►│ .NET Core │\r└─────────────────┘ └─────────────────┘ └─────────────────┘\r│ │\r▼ ▼\r┌─────────────────┐ ┌─────────────────┐\r│ Business Service│ │ Data Service │\r│ .NET Core │ │ PostgreSQL │\r└─────────────────┘ └─────────────────┘ Integración con Legacy Adapter pattern para sistemas Oracle legacy Message transformation entre formatos Gradual migration strategy Backward compatibility garantizada Metodología de Desarrollo Agile/Scrum con sprints de 2 semanas Test-Driven Development (TDD) Continuous Integration/Continuous Deployment (CI/CD) Code reviews obligatorios Pair programming para conocimiento compartido Herramientas y DevOps Control de Versiones Git con GitFlow workflow Azure DevOps para gestión de proyectos Pull requests con revisión de código CI/CD Pipeline Azure Pipelines para automatización Docker containerization Kubernetes para orquestación Automated testing en múltiples entornos Monitoring y Logging Application Insights para telemetría ELK Stack para logging centralizado Prometheus y Grafana para métricas Health checks automatizados Este proyecto demuestra mi experiencia en liderar equipos de desarrollo, implementar arquitecturas complejas y entregar soluciones empresariales de alta calidad que generan valor real para el negocio.\n","permalink":"https://CristianSoncco.github.io/portfolio/proyecto-ntt-data/","tags":["Angular 12","C# .NET CORE","PostgreSQL","Oracle","Microservicios"],"title":"Sistemas Web Empresariales - NTT DATA"}]